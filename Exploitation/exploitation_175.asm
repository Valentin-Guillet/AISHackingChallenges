   0x401914 <+0>:	endbr64
   0x401918 <+4>:	push   %rbp
   0x401919 <+5>:	mov    %rsp,%rbp
   0x40191c <+8>:	sub    $0xa0,%rsp
   0x401923 <+15>:	mov    %edi,-0x94(%rbp)
   0x401929 <+21>:	mov    %rsi,-0xa0(%rbp)
   0x401930 <+28>:	mov    %fs:0x28,%rax
   0x401939 <+37>:	mov    %rax,-0x8(%rbp)
   0x40193d <+41>:	xor    %eax,%eax
   0x40193f <+43>:	movl   $0x0,-0x90(%rbp)
   0x401949 <+53>:	movl   $0x0,-0x8c(%rbp)
   0x401953 <+63>:	movq   $0x0,-0x80(%rbp)
   0x40195b <+71>:	movq   $0x0,-0x78(%rbp)
   0x401963 <+79>:	movq   $0x0,-0x70(%rbp)
   0x40196b <+87>:	movq   $0x0,-0x68(%rbp)
   0x401973 <+95>:	movq   $0x0,-0x60(%rbp)
   0x40197b <+103>:	movq   $0x0,-0x58(%rbp)
   0x401983 <+111>:	movl   $0x0,-0x51(%rbp)
   0x40198a <+118>:	movq   $0x0,-0x40(%rbp)
   0x401992 <+126>:	movq   $0x0,-0x38(%rbp)
   0x40199a <+134>:	movq   $0x0,-0x30(%rbp)
   0x4019a2 <+142>:	movq   $0x0,-0x28(%rbp)
   0x4019aa <+150>:	movq   $0x0,-0x20(%rbp)
   0x4019b2 <+158>:	movq   $0x0,-0x18(%rbp)
   0x4019ba <+166>:	movl   $0x0,-0x11(%rbp)
   0x4019c1 <+173>:	movq   $0x0,-0x88(%rbp)
   0x4019cc <+184>:	mov    $0x0,%edi
   0x4019d1 <+189>:	call   0x420d90 <time>
   0x4019d6 <+194>:	mov    %eax,%edi
   0x4019d8 <+196>:	call   0x4051d0 <srandom>
   0x4019dd <+201>:	cmpl   $0x1,-0x94(%rbp)
   0x4019e4 <+208>:	jle    0x401a87 <main+371>
   0x4019ea <+214>:	mov    -0xa0(%rbp),%rax
   0x4019f1 <+221>:	add    $0x8,%rax
   0x4019f5 <+225>:	mov    (%rax),%rax
   0x4019f8 <+228>:	lea    0x7b93c(%rip),%rdx        # 0x47d33b == "--help"
   0x4019ff <+235>:	mov    %rdx,%rsi
   0x401a02 <+238>:	mov    %rax,%rdi
   0x401a05 <+241>:	call   0x401130
   0x401a0a <+246>:	test   %eax,%eax
   0x401a0c <+248>:	jne    0x401a35 <main+289>
   0x401a0e <+250>:	mov    $0x0,%eax
   0x401a13 <+255>:	call   0x40188c <print_help>
   0x401a18 <+260>:	mov    $0x0,%eax
   0x401a1d <+265>:	mov    -0x8(%rbp),%rdx
   0x401a21 <+269>:	sub    %fs:0x28,%rdx
   0x401a2a <+278>:	je     0x401c62 <main+846>
   0x401a30 <+284>:	jmp    0x401c5d <main+841>
   0x401a35 <+289>:	mov    -0xa0(%rbp),%rax
   0x401a3c <+296>:	add    $0x8,%rax
   0x401a40 <+300>:	mov    (%rax),%rax
   0x401a43 <+303>:	lea    0x7b8f8(%rip),%rdx        # 0x47d342 == "--flag"
   0x401a4a <+310>:	mov    %rdx,%rsi
   0x401a4d <+313>:	mov    %rax,%rdi
   0x401a50 <+316>:	call   0x401130
   0x401a55 <+321>:	test   %eax,%eax
   0x401a57 <+323>:	jne    0x401a87 <main+371>
   0x401a59 <+325>:	cmpl   $0x2,-0x94(%rbp)
   0x401a60 <+332>:	jle    0x401a87 <main+371>
   0x401a62 <+334>:	mov    -0xa0(%rbp),%rax
   0x401a69 <+341>:	add    $0x10,%rax
   0x401a6d <+345>:	mov    (%rax),%rax
   0x401a70 <+348>:	mov    %rax,%rsi
   0x401a73 <+351>:	lea    0x7b8d6(%rip),%rax        # 0x47d350 == "\nFlag specified on command line: %s\n\n"
   0x401a7a <+358>:	mov    %rax,%rdi
   0x401a7d <+361>:	mov    $0x0,%eax
   0x401a82 <+366>:	call   0x405af0 <printf>
   0x401a87 <+371>:	mov    $0x0,%eax
   0x401a8c <+376>:	call   0x401845 <print_welcome>
   0x401a91 <+381>:	lea    0x7b8e0(%rip),%rax        # 0x47d378 == "Hello. How are you? (CNTRL+C to quit)"
   0x401a98 <+388>:	mov    %rax,%rdi
   0x401a9b <+391>:	call   0x40aaf0 <puts>

# Main loop
   0x401aa0 <+396>:	lea    -0x80(%rbp),%rax
   0x401aa4 <+400>:	mov    $0x33,%edx
   0x401aa9 <+405>:	mov    $0x0,%esi
   0x401aae <+410>:	mov    %rax,%rdi
   0x401ab1 <+413>:	call   0x401110
   0x401ab6 <+418>:	lea    -0x40(%rbp),%rax
   0x401aba <+422>:	mov    $0x33,%edx
   0x401abf <+427>:	mov    $0x0,%esi
   0x401ac4 <+432>:	mov    %rax,%rdi
   0x401ac7 <+435>:	call   0x401110
   0x401acc <+440>:	lea    0x7b8cb(%rip),%rax        # 0x47d39e == "base64> "
   0x401ad3 <+447>:	mov    %rax,%rdi
   0x401ad6 <+450>:	mov    $0x0,%eax
   0x401adb <+455>:	call   0x405af0 <printf>
   0x401ae0 <+460>:	mov    0xa7d11(%rip),%rdx        # 0x4a97f8 <stdin>
   0x401ae7 <+467>:	lea    -0x80(%rbp),%rax
   0x401aeb <+471>:	mov    $0x32,%esi
   0x401af0 <+476>:	mov    %rax,%rdi
   0x401af3 <+479>:	call   0x40a770 <fgets>
   0x401af8 <+484>:	lea    -0x80(%rbp),%rax
   0x401afc <+488>:	mov    %rax,%rdi
   0x401aff <+491>:	call   0x401c64 <Base64decode_len>
   0x401b04 <+496>:	mov    %eax,-0x8c(%rbp)
   0x401b0a <+502>:	cmpl   $0x32,-0x8c(%rbp)
   0x401b11 <+509>:	jle    0x401b27 <main+531>
   0x401b13 <+511>:	lea    0x7b88e(%rip),%rax        # 0x47d3a8 == "That message is too long for me to handle""
   0x401b1a <+518>:	mov    %rax,%rdi
   0x401b1d <+521>:	call   0x40aaf0 <puts>
   0x401b22 <+526>:	jmp    0x401c58 <main+836>
   0x401b27 <+531>:	lea    -0x80(%rbp),%rdx
   0x401b2b <+535>:	lea    -0x40(%rbp),%rax
   0x401b2f <+539>:	mov    %rdx,%rsi
   0x401b32 <+542>:	mov    %rax,%rdi
   0x401b35 <+545>:	call   0x401cc5 <Base64decode>
   0x401b3a <+550>:	mov    %eax,-0x8c(%rbp)
   0x401b40 <+556>:	lea    -0x40(%rbp),%rax
   0x401b44 <+560>:	mov    %rax,-0x88(%rbp)
   0x401b4b <+567>:	mov    -0x88(%rbp),%rax
   0x401b52 <+574>:	movzwl (%rax),%eax
   0x401b55 <+577>:	cmp    $0x45,%ax
   0x401b59 <+581>:	jne    0x401b73 <main+607>
   0x401b5b <+583>:	movb   $0x1,0xa964e(%rip)        # 0x4ab1b0 <g_debug>
   0x401b62 <+590>:	lea    0x7b86f(%rip),%rax        # 0x47d3d8  == "Now you're speaking my language!!"
   0x401b69 <+597>:	mov    %rax,%rdi
   0x401b6c <+600>:	call   0x40aaf0 <puts>
   0x401b71 <+605>:	jmp    0x401b99 <main+645>
   0x401b73 <+607>:	mov    -0x88(%rbp),%rax
   0x401b7a <+614>:	movzwl (%rax),%eax
   0x401b7d <+617>:	cmp    $0x539,%ax
   0x401b81 <+621>:	jne    0x401b99 <main+645>
   0x401b83 <+623>:	movb   $0x1,0xa9627(%rip)        # 0x4ab1b1 <g_leet>
   0x401b8a <+630>:	lea    0x7b869(%rip),%rax        # 0x47d3fa  == "1337 5p34k 3n4b13d"
   0x401b91 <+637>:	mov    %rax,%rdi
   0x401b94 <+640>:	call   0x40aaf0 <puts>
   0x401b99 <+645>:	movzbl 0xa9610(%rip),%eax        # 0x4ab1b0 <g_debug>
   0x401ba0 <+652>:	test   %al,%al
   0x401ba2 <+654>:	je     0x401c37 <main+803>

   0x401ba8 <+660>:	lea    0x7b861(%rip),%rax        # 0x47d410 == "Here's everything I know about that:"
   0x401baf <+667>:	mov    %rax,%rdi
   0x401bb2 <+670>:	call   0x40aaf0 <puts>
   0x401bb7 <+675>:	movl   $0x0,-0x90(%rbp)
   0x401bc1 <+685>:	jmp    0x401c17 <main+771>

# This following loop prints a space if index > 0 and index % 16 == 0
     0x401bc3 <+687>:	cmpl   $0x0,-0x90(%rbp)
     0x401bca <+694>:	je     0x401be3 <main+719>
     # If ind (= $rbp - 0x90) > 0
       0x401bcc <+696>:	mov    -0x90(%rbp),%eax
       0x401bd2 <+702>:	and    $0xf,%eax
       0x401bd5 <+705>:	test   %eax,%eax
       0x401bd7 <+707>:	jne    0x401be3 <main+719>
       # and ind % 16 == 0
       0x401bd9 <+709>:	mov    $0xa,%edi
       0x401bde <+714>:	call   0x40ad20 <putchar>

     0x401be3 <+719>:	mov    -0x88(%rbp),%rdx
     0x401bea <+726>:	mov    -0x90(%rbp),%eax
     0x401bf0 <+732>:	cltq
     0x401bf2 <+734>:	movzbl 0x4(%rdx,%rax,1),%eax
     0x401bf7 <+739>:	movzbl %al,%eax
     0x401bfa <+742>:	mov    %eax,%esi
     0x401bfc <+744>:	lea    0x7b832(%rip),%rax        # 0x47d435 == "%02x"
     0x401c03 <+751>:	mov    %rax,%rdi
     0x401c06 <+754>:	mov    $0x0,%eax
     0x401c0b <+759>:	call   0x405af0 <printf>
     0x401c10 <+764>:	addl   $0x1,-0x90(%rbp)
     0x401c17 <+771>:	mov    -0x88(%rbp),%rax          # Address of decoded input
     0x401c1e <+778>:	movzwl 0x2(%rax),%eax
     0x401c22 <+782>:	movzwl %ax,%eax
     0x401c25 <+785>:	cmp    %eax,-0x90(%rbp)
     0x401c2b <+791>:	jl     0x401bc3 <main+687>

   0x401c2d <+793>:	mov    $0xa,%edi
   0x401c32 <+798>:	call   0x40ad20 <putchar>
   0x401c37 <+803>:	mov    $0x0,%eax
   0x401c3c <+808>:	call   0x4018b5 <get_reponse>
   0x401c41 <+813>:	mov    %rax,%rdi
   0x401c44 <+816>:	call   0x40aaf0 <puts>
   0x401c49 <+821>:	lea    0x7b7eb(%rip),%rax        # 0x47d43b == "Please, tell me more."
   0x401c50 <+828>:	mov    %rax,%rdi
   0x401c53 <+831>:	call   0x40aaf0 <puts>
   0x401c58 <+836>:	jmp    0x401aa0 <main+396>
   0x401c5d <+841>:	call   0x422010 <__stack_chk_fail_local>
   0x401c62 <+846>:	leave
   0x401c63 <+847>:	ret


# $rbp - 0x88 is the base64decoded input
# $rbp - 0x90 is an index into the input
# We can pass `--flag ABCD` as argument to the binary
# -> the flag is stored at the address stored in ($rbp - 0xa0) plus 10,
#    i.e. 0x10(-0xa0(%rbp))    (2 redirections)
